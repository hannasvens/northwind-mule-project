<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-test-suite.xml" />
	<munit:test name="getCustomers-happy-path" doc:id="9b5ddf31-c567-421c-ad79-e5a076e219df" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="c36c35e1-2554-41c3-83fa-484dbbdda532" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="baa1cc98-018a-43e6-800c-7c041641b862" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[&#10;  {&#10;    "customerID": "ALFKI",&#10;    "companyName": "Alfreds Futterkiste",&#10;    "contactName": "Maria Anders"&#10;  },&#10;  {&#10;    "customerID": "ANATR",&#10;    "companyName": "Ana Trujillo Emparedados y helados",&#10;    "contactName": "Ana Trujillo"&#10;  }&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getCutomerFlow" doc:id="b4f83ae0-0664-41ff-a355-3721ee569733" name="getCustomersFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression" doc:id="b67efd6d-fbdb-497d-8c7d-159a91654580" />
		</munit:validation>
	</munit:test>
	<munit:test name="getCustomerByID-happy-path" doc:id="153ab072-fbe4-4c82-b62d-5b24f6f8a6ea">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="8baef91c-1973-4394-a61a-70c36ac91f65" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="898f63ec-cfd0-4ac5-a104-2e5790533e7e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[{&#10;  "customerID": "ANTON",&#10;  "companyName": "Antonio Moreno Taquera",&#10;  "contactName": "Antonio Moreno",&#10;  "contactTitle": "Owner",&#10;  "address": "Mataderos  2312",&#10;  "PostalCode": 5023,&#10;  "country": "Mexico",&#10;  "phone": "(5) 555-3932"&#10;}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="ab9f73a1-6ac3-451f-be9b-936974cc910f" name="getCustomerByIDFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="3937ad6c-02d2-401a-8c75-e167fcecbb7b" />
		</munit:validation>
	</munit:test>
	<munit:test name="postCustomer-happy-path" doc:id="e6b062d5-15e0-4257-8951-ed4071e7641f" description="Test">
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="e028fe60-28d2-4cf5-9443-1daef1ffeef8" >
				<munit:payload value='#[{&#10;  "customerID": "ANTON",&#10;  "companyName": "Antonio Moreno Taquera",&#10;  "contactName": "Antonio Moreno",&#10;  "contactTitle": "Owner",&#10;  "address": "Mataderos  2312",&#10;  "postalCode": 5023,&#10;  "country": "Mexico",&#10;  "phone": "(5) 555-3932"&#10;}]' mediaType="application/xml" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="c1f4522e-1fc0-4057-85ad-9986ac9fa492" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="71c88a2f-b4d8-41eb-b421-e64be222a814" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[payload]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCutomerFlow" doc:id="3d713d9f-d6c1-44b9-aacb-da06400b9895" name="postCustomerFlow"/>
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression" doc:id="4548c284-b92f-422d-a973-8251f4b6587f" />
		</munit:validation>
	</munit:test>
	<munit:test name="getCustomers-connectivity-error-path" doc:id="1c8e122a-c428-443e-bed0-fd10523a19d0" expectedErrorType="HTTP:CONNECTIVITY">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="5cbbff26-6f7e-41cf-b8c3-d577cdb121e6" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="baa1cc98-018a-43e6-800c-7c041641b862" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:CONNECTIVITY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getCutomerFlow" doc:id="06d796c0-1841-4275-8090-328c79b2ed9b" name="getCustomersFlow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="43a5c703-5f50-4f2a-8d81-29c9bd8e7cd2" actual="#[payload.message]" expected="Service unavailable" message="Error message not working"/>
		</munit:validation>
	</munit:test>
	<munit:test name="postCustomer-bad-request-error-path" doc:id="7972d357-4b78-4b28-9266-a3ca97967cc0" expectedErrorType="HTTP:BAD_REQUEST">
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="63274418-3d50-412c-8eeb-484817e60775">
				<munit:payload value='#[output application/xml&#10;---&#10;Customer: {&#10;  "customerID": "ANTON",&#10;  "companyName": "Antonio Moreno Taquera",&#10;  "contactName": "Antonio Moreno",&#10;  "contactTitle": "Owner",&#10;  "address": "Mataderos 2312",&#10;  "postalCode": 5023,&#10;  "country": "Mexico",&#10;  "phone": "(5) 555-3932"&#10;}]' mediaType="application/xml" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="1105ddac-be65-4e8c-adc5-aa79ce136296" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="71c88a2f-b4d8-41eb-b421-e64be222a814" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="HTTP:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCutomerFlow" doc:id="41cd8577-9323-41b0-919f-c1b3937c39c6" name="postCustomerFlow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="74511c3a-e19a-4723-96c0-460ee4ba1e88" actual="#[payload.message]" expected="Duplicated entry to database" message="Error message not working"/>
		</munit:validation>
	</munit:test>
	<munit:test name="postCustomer-any-error-path" doc:id="d4a6d31a-100d-4f84-9dc4-1bbc2d8619e5" expectedErrorType="ANY">
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="5411f053-0fbc-4f5c-8af5-f44def10746b" >
				<munit:payload value='#[output application/xml&#10;---&#10;Customer: {&#10;  "customerID": "ANTON",&#10;  "companyName": "Antonio Moreno Taquera",&#10;  "contactName": "Antonio Moreno",&#10;  "contactTitle": "Owner",&#10;  "address": "Mataderos 2312",&#10;  "postalCode": 5023,&#10;  "country": "Mexico",&#10;  "phone": "(5) 555-3932"&#10;}]' mediaType="application/xml" />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="37e87398-d659-4cb6-b22d-3623878b105e" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="71c88a2f-b4d8-41eb-b421-e64be222a814" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="ANY" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCutomerFlow" doc:id="a310cd58-f36c-4e02-9c27-7654283a64a9" name="postCustomerFlow" />
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="93d93bcb-55c5-40b4-a513-2b46d039cb17" actual="#[payload.message]" expected="#[error.description]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="postOffer-happy-path" doc:id="d18e081c-4dc7-4cfd-be69-01c87f7c7c70" >
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="450aac2f-6656-4ef7-bb6a-4ccedfce367c" >
				<munit:payload value='#[{"productID": 2, "quantity": 10, "customerID": "ANTON"}]' />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="e18caf5b-054a-466c-8c4e-d7e1ef5b0b1b" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="39acfcec-d443-41c1-932a-5369d0762a74" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[{"offerID": 3}]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="1127c08a-6422-430d-9eed-bd2aca82ca42" name="postOfferRequestFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="7d038c2f-5e9e-4928-bfbe-b366d72c70ea" />
		</munit:validation>
	</munit:test>
	<munit:test name="acceptOffer-happy-path" doc:id="9c1a8c1e-2805-4236-9f15-5a0c21c5adba" >
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="107dde97-57bd-4fe5-853c-d338319c58e4" >
				<munit:payload value='#[{"OfferID": 2, "PaymentTransactionID": 10}]' />
				<munit:attributes value='#["ANTON"]' />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="3d496a0a-8687-40c2-a5a7-2e0c27c4a395" processor="http:request" >
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="574e3663-bf18-4350-9b57-6a30b82d9a91" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[payload]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="ab992f1f-eb89-440e-b645-47dad333fd60" name="acceptOfferFlow" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert expression" doc:id="a6f9b137-896d-4772-b999-a208844d65ad" />
		</munit:validation>
	</munit:test>
	<munit:test name="getProducts-happy-path" doc:id="c6330d73-1ab4-4fc8-8c62-a66d48c2d2e3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="de1e582e-4b9d-4a9f-9a4f-3bc7de0e27ee" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="0d278b39-587c-4a0d-8447-72691ab289ca" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[&#10;  {&#10;    "ProductID": 1,&#10;    "ProductName": "Chai",&#10;    "SupplierID": 1,&#10;    "CategoryID": 1,&#10;    "QuantityPerUnit": "10 boxes",&#10;    "UnitPrice": 18000,&#10;    "UnitsInStock": 39,&#10;    "UnitsOnOrder": 0,&#10;    "ReorderLevel": 10,&#10;    "Discontinued": 0&#10;  },&#10;  {&#10;    "ProductID": 2,&#10;    "ProductName": "Chang",&#10;    "SupplierID": 1,&#10;    "CategoryID": 1,&#10;    "QuantityPerUnit": "24 bottles",&#10;    "UnitPrice": 19000,&#10;    "UnitsInStock": 17,&#10;    "UnitsOnOrder": 40,&#10;    "ReorderLevel": 25,&#10;    "Discontinued": 0&#10;  }&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="d076a2d9-90e2-499f-bc40-fe0804506446" name="getProducts"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="82cc8a3d-f95a-473a-8256-f11a06f82e28" />
		</munit:validation>
	</munit:test>
	<munit:test name="getOffersByStatus-happy-path" doc:id="da56950a-9208-42dd-94f4-cd408c2233ac" >
		<munit:behavior >
			<munit:set-event doc:name="Set Event" doc:id="369d1cd8-4768-4980-ba7f-6dbf73862898" >
				<munit:attributes value='#[{"status": "pending", "customerID": "ANTON"}]' />
			</munit:set-event>
			<munit-tools:mock-when doc:name="Mock when" doc:id="ad81114f-890b-4427-930c-e4473832d7e4" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4db7160c-9c95-43be-8439-49fa3879d3fa" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[&#10;  {&#10;    "OfferID": 1,&#10;    "Status": "accepted",&#10;    "DateCreated": "2022-12-13",&#10;    "DateApproved": "2022-12-16",&#10;    "EmployeeID": 5,&#10;    "CustomerID": "ALKWE",&#10;    "ProductID": 23,&#10;    "Quantity": 3,&#10;    "OrderID": 11086,&#10;    "TotalPrice": 30,&#10;    "PriceDiscount": 0,&#10;    "PaymentTransactionID": 12&#10;  },&#10;  {&#10;    "OfferID": 2,&#10;    "Status": "accepted",&#10;    "DateCreated": "2022-12-16",&#10;    "DateApproved": "2022-12-19",&#10;    "EmployeeID": 5,&#10;    "CustomerID": "ALKWE",&#10;    "ProductID": 23,&#10;    "Quantity": 5,&#10;    "OrderID": 11078,&#10;    "TotalPrice": 400,&#10;    "PriceDiscount": 0,&#10;    "PaymentTransactionID": 6&#10;  }&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="b78c2fab-78cb-4f1f-8106-8af332a28f56" name="getOffersByStatusFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="28b6edf5-1915-4f93-a564-ba1705716ef9" />
		</munit:validation>
	</munit:test>
	<munit:test name="getOrders-happy-path" doc:id="9c519cfc-970e-4e43-aebe-8714bb9ebb59" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="b96932ec-6319-4a78-9291-faa8abff4541" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="034a1e17-d739-4a31-82e7-aec48b766308" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value='#[[&#10;  {&#10;    "OrderID": 12345,&#10;    "CustomerID": "ALFKI",&#10;    "EmployeeID": 1,&#10;    "OrderDate": "2022-12-01",&#10;    "RequiredDate": "2022-12-05",&#10;    "ShippedDate": "2022-12-10",&#10;    "ShipVia": 2,&#10;    "Freight": 6000,&#10;    "ShipName": "Simons Bistro",&#10;    "ShipAddress": "2817 Milton Dr",&#10;    "ShipCity": "Spokane",&#10;    "ShipRegion": "WA",&#10;    "ShipPostalCode": "123-573",&#10;    "ShipCountry": "USA"&#10;  },&#10;  {&#10;    "OrderID": 54321,&#10;    "CustomerID": "ANTON",&#10;    "EmployeeID": 3,&#10;    "OrderDate": "2022-12-10",&#10;    "RequiredDate": "2022-12-12",&#10;    "ShippedDate": "2022-12-14",&#10;    "ShipVia": 1,&#10;    "Freight": 8000,&#10;    "ShipName": "Apple Inc",&#10;    "ShipAddress": "20 First Ave",&#10;    "ShipCity": "New York",&#10;    "ShipRegion": "NY",&#10;    "ShipPostalCode": "123-123",&#10;    "ShipCountry": "USA"&#10;  }&#10;]]' />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="0566ffce-3079-4fd7-8eef-21de933808fc" name="getOrders"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="87406361-7202-4db3-bdfb-fb7adb5542b2" />
		</munit:validation>
	</munit:test>
	<munit:test name="getOrders-mule-expression-error-path" doc:id="e12e7958-1be3-4ab7-a996-fa6f0e7bfc64" expectedErrorType="MULE:EXPRESSION">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="f9c1c037-07be-4d99-a9c2-6a9225167aa2" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="034a1e17-d739-4a31-82e7-aec48b766308" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="MULE:EXPRESSION" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow Reference" doc:id="5b301149-0770-4b1e-86e7-e2edf39783fe" name="getOrders"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression" doc:id="dd58feaa-a9a7-4ebe-8c67-22ee65d06703" />
		</munit:validation>
	</munit:test>


</mule>
