<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="interface-order-sapi-suite.xml" />
	<munit:test name="get:\orders\shipAddress:order-sapi-config-test" doc:id="5e2e98ad-69b6-473f-be2b-43b0f2fb8319" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="1852394e-aa64-4b97-aaf4-0ee36433af8d" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="914d03f6-2cf0-4c3c-9448-01a7805bace7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getordersshipAddressordersapiconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getordersshipAddressordersapiconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="11fc2977-d128-429e-932b-96cce9809b0b" >
				<munit:payload value="#[readUrl('classpath://getordersshipAddressordersapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getordersshipAddressordersapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getordersshipAddressordersapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\orders\shipAddress:order-sapi-config" doc:id="f31a1133-b16e-4c68-995d-74937aa01ada" name="get:\orders\shipAddress:order-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ca2250ab-44f3-415e-89b2-ac34ba70a697" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getordersshipAddressordersapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orders\customer\(customerID):order-sapi-config-test" doc:id="ef07618a-bf4b-4eaa-860e-90716a42442e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="f72d8504-a816-47b0-8019-67dacd334186" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3402bb14-3612-4d31-8080-3f7a74b34139" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="customerID" value="#[output application/java --- readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="e4bf7c1c-6124-41e0-b977-a6edcece0d09" >
				<munit:payload value="#[readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getorderscustomercustomerIDordersapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\orders\customer\(customerID):order-sapi-config" doc:id="e75c6f2a-1e80-4fdd-b2d9-817a810a3f50" name="get:\orders\customer\(customerID):order-sapi-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="722fc487-b085-49cd-bf92-7b9d658d419a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getorderscustomercustomerIDordersapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\orders\employee\(employeeID):order-sapi-config-test" doc:id="27110e04-fe38-4310-95a4-1748f3ef1f88">
		<munit:behavior>
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="cf55a236-e092-4967-be8f-386277c53521" processor="flow-ref">
				<munit-tools:with-attributes>
					<munit-tools:with-attribute whereValue="633b58dd-909d-4deb-a9bd-72a50f5957ae" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return>
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:variables>
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="employeeID" value="#[output application/java --- readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c0296b65-372b-4f18-83e4-74df4f4d9dc1">
				<munit:payload value="#[readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables>
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getordersemployeeemployeeIDordersapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<flow-ref doc:name="Flow-ref to get:\orders\employee\(employeeID):order-sapi-config" doc:id="58d77912-8830-48c6-8fc8-25fc84bb6704" name="get:\orders\employee\(employeeID):order-sapi-config" />
		</munit:execution>
		<munit:validation>
			<munit-tools:assert doc:name="Assert payload" doc:id="99d1b747-8f60-4099-8408-4ba3d7e9a7d4" message="The payload does not match">
				<munit-tools:that><![CDATA[#[%dw 2.0
import getordersemployeeemployeeIDordersapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="order-sapi-main-test" doc:id="be7c263f-c191-4d62-ba20-2ce242297d89" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="b5eb1bdd-3287-4ebb-95f2-249a84f5171c" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="401acacb-ec42-49f3-b09b-2ff6d12622f7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-apikit:router" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="5e548968-8f0b-4704-8c03-51ffd3af7315" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://ordersapimaintest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://ordersapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to order-sapi-main" doc:id="2caee8a2-5fc7-4e52-a55a-c29616d4ef79" name="order-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="e67d969b-dbd5-42d4-8906-f93c8da23b37" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import ordersapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-apikit:router" doc:id="57ade5de-090d-4ce7-833a-062108171050" >
		<try doc:name="Try" doc:id="e5afa175-a153-45ea-99be-022179330c1a" >
			<munit-tools:retrieve doc:name="Retrieve" doc:id="b5c8e7ce-26bf-4a83-a7ec-7d77dd840249" key="Mock APIkit Router"/>
			<error-handler >
				<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="eceeab81-fe88-4a24-9b58-746e9182d53a" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload" doc:id="9671e0eb-8e57-48f3-98d0-2ad2fbfe5b25" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store" doc:id="6bf397b6-fa44-47a3-bd45-82caee0eb98a" key="Mock APIkit Router">
			<munit-tools:value ><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice" doc:id="e9536c79-bb81-4cbd-867a-94f68d700a74" >
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event" doc:id="f3e4e368-0f1c-48be-83dd-8fdbe0847707" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://ordersapimaintest\mock_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://ordersapimaintest\mock_variable_.dwl')]" />
						<munit:variable key="httpStatus" value="#[readUrl('classpath://ordersapimaintest\mock_variable_1.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event" doc:id="3255b786-ed07-43eb-b20d-832ca384630f" >
					<munit:payload value="#[output application/json  --- readUrl('classpath://ordersapimaintest\mock_payload1.dwl')]" encoding="UTF-8" mediaType="application/json " />
					<munit:variables >
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://ordersapimaintest\mock_variable_2.dwl')]" />
						<munit:variable key="httpStatus" value="#[readUrl('classpath://ordersapimaintest\mock_variable_3.dwl')]" />
						<munit:variable key="ShipAddress" value="#[output application/json --- readUrl('classpath://ordersapimaintest\mock_variable_4.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="OrderID" value="#[output application/java --- readUrl('classpath://ordersapimaintest\mock_variable_5.dwl')]" encoding="UTF-8" mediaType="application/java" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise >
				<munit-tools:fail doc:name="Fail" doc:id="d4e59abf-02a7-4d7b-be98-bf36b6684f95" message="There are no more events to mock"/>
			</otherwise>
		</choice>
	</flow>


</mule>
